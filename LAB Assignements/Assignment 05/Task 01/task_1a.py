# -*- coding: utf-8 -*-
"""Task 1a.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysf89-b7-MPYQ4HrZ3XnDP9cf4QymiMO
"""

file_in=open('input1a.txt','r')
file_out=open('output1a.txt','w')
temp=file_in.readline().split(' ')
node,edges=int(temp[0]),int(temp[1])
ad_list=[[] for i in range(node+1)]
indegree=[0 for i in range(node+1)]
visited_list=[0 for i in range(node+1)]
for i in range(1,edges+1):
  temp=file_in.readline().split(' ')
  ad_list[int(temp[0])].append(int(temp[1]))
for i in range(1,len(ad_list)):
  for j in ad_list[i]:
    indegree[j]+=1
stack=[]
def dfs_topo(source):
  visited_list[source]=1
  for j in ad_list[source]:
    if visited_list[j]==0:
      dfs_topo(j)
  stack.append(source)

def cyclic(ad_list,source):
  visited_list[source]=1


  for j in ad_list[source]:
    if visited_list[j]==0:
      result=cyclic(ad_list,j)
      if result is True:
        return True

    elif visited_list[j]==1:
      return True

  visited_list[source]=2
  return False

ans=False

for i in range(1,node+1):
  if visited_list[i]==0:
    out=cyclic(ad_list,i)
    if out is True:
      ans=True
      break

if ans==True:
  file_out.write(f'IMPOSSIBLE')
else:
  visited_list=[0 for i in range(node+1)]
  for i in range(1,node+1):
    if indegree[i]==0:
      dfs_topo(i)

for i in range(len(stack)):
  if len!=1:
    file_out.write(f'{stack.pop(-1)} ')
  else:
    file_out.write(f'{stack.pop(-1)}')
file_out.close()