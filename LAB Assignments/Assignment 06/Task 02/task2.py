# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysf89-b7-MPYQ4HrZ3XnDP9cf4QymiMO
"""

file_in=open('input2.txt','r')
file_out=open('output2.txt','w')
temp=file_in.readline().split(' ')
node,edges=int(temp[0]),int(temp[1])
ad_list=[[] for i in range(node+1)]
for i in range(1,edges+1):
  temp=file_in.readline().split(' ')
  ad_list[int(temp[0])].append((int(temp[1]),int(temp[2])))
def dijkstra(ad_list,source):
  distance=[0 for i in range(node+1)]
  queue=[]
  for i in range(1,node+1):
    distance[i]=999999999999999999999999999999
    queue.append(i)
  distance[source]=0
  while len(queue)!=0:
    min=999999999999999999999999999999
    u=0
    for j in queue:
      if distance[j]<min:
        min=distance[j]
        u=j
    if u!=0:
      queue.remove(u)
    else:
      break
    for k in ad_list[u]:
      alt=distance[u]+k[1]
      if alt<distance[k[0]]:
        distance[k[0]]=alt
  distance[source]=999999999999999999999999999999
  return distance
temp=file_in.readline().split(' ')
per1,per2=int(temp[0]),int(temp[1])
min_time=[999999999999999999999999999999 for i in range(node+1)]
def meeting(ad_list,per1,per2):
  min=999999999999999999999999999999
  distance1=dijkstra(ad_list,per1)
  distance2=dijkstra(ad_list,per2)
  for i in range(1,len(ad_list)):
    if distance1[i]+distance2[i]<min:
      min_time[i]=max(distance1[i],distance2[i])
  meeting_point=999999999999999999999999999999
  node=0
  for k in range(1,len(min_time)):
    if min_time[k]<meeting_point:
      meeting_point=min_time[k]
      node=k
  if meeting_point==999999999999999999999999999999:
    file_out.write(f'IMPOSSIBLE')
  else:
    file_out.write(f'Time {meeting_point}\nNode {node}')
meeting(ad_list,per1,per2)
file_out.close()